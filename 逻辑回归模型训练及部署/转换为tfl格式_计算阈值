# -*- coding: utf-8 -*-
"""TFL_config.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/147BTGCRSS2Ohq28hZbSEj96Q14jurv2y

# TFL模型 配置张量
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
import numpy as np

# 用云盘的tensorflow lite模型进行预测
# 加载 TensorFlow Lite 模型
interpreter = tf.lite.Interpreter(model_path="/content/drive/MyDrive/Colab Notebooks/covid_models/lr_model.tflite")
interpreter.allocate_tensors()

# 获取输入和输出张量
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# 假设有一个新的数据点，用于预测
new_data_point = np.array([[0, 0, 0, 0, 1, 1, 1, 1, 0]], dtype=np.float32)

# 设置输入数据
interpreter.set_tensor(input_details[0]['index'], new_data_point)

# 运行推理
interpreter.invoke()

# 获取输出
output_data = interpreter.get_tensor(output_details[0]['index'])

print("预测结果:", output_data)

print(input_details)
print(output_details)

"""# 用原来的模型预测"""

import pickle
import pandas as pd

# 加载模型
with open('/content/drive/MyDrive/Colab Notebooks/covid_models/lr_model.sav', 'rb') as file:
    lr_model = pickle.load(file)

# 假设有一个新的数据点，用于预测
new_data_point = [[0, 0, 0, 1, 1, 1, 1, 1, 0]]
# 假设特征名字是 ['feature1', 'feature2', ...]
features = pd.DataFrame(new_data_point, columns=['cough',	'fever',	'sore_throat',	'shortness_of_breath',	'head_ache',	'age_60_and_above',	'gender', 'abroad',	'contact_with_covid_positive_patient'])

# 进行预测
prediction = lr_model.predict(features)

print("预测结果:", prediction)

"""# 生成512所有的输入数据的可能性"""

import numpy as np
from itertools import product

# 生成所有可能的组合
all_combinations = list(product([0, 1], repeat=9))
print(np.array(all_combinations).shape)
print(type(all_combinations))
# 打印数组
print(all_combinations)
# 将列表转换为float32格式的NumPy数组
Input_data = np.array(all_combinations, dtype=np.float32)
print(Input_data)
print(type(Input_data[0]))
print(Input_data[0])

"""# 首先利用tfl的模型进行预测"""

result_tfl = []
for i in range(512):
    # 假设有一个新的数据点，用于预测
    new_data_point = Input_data[i].reshape(1, -1)  # 将形状调整为 (1, 9)

    # 设置输入数据
    interpreter.set_tensor(input_details[0]['index'], new_data_point)

    # 运行推理
    interpreter.invoke()

    # 获取输出
    output_data = interpreter.get_tensor(output_details[0]['index'])

    # print("预测结果:", output_data)

    result_tfl.append(output_data)
print(result_tfl)

"""## 将tfl的结果排序"""

import matplotlib.pyplot as plt
import numpy as np

# 对 result_tfl 列表进行排序
sorted_result_tfl = sorted(result_tfl)
print(sorted_result_tfl[67])

# 压缩 sorted_result_tfl 的维度
sorted_result_tfl = np.squeeze(sorted_result_tfl)

# 创建索引数组作为 x 轴数据，仅包含前一百个数据点
index = np.arange(100)

# 仅包含前一百个数据点
sorted_result_tfl = sorted_result_tfl[:100]

# 绘制曲线
plt.plot(index, sorted_result_tfl)
plt.xlabel('Index')
plt.ylabel('Value')
plt.title('Sorted result_tfl Curve (First 100 Data Points)')
plt.grid(True)
plt.show()

"""# 利用原本的模型进行推理"""

result_ori = []
for i in range(512):
  # 假设有一个新的数据点，用于预测
  new_data_point = [Input_data[i]]
  # 假设特征名字是 ['feature1', 'feature2', ...]
  features = pd.DataFrame(new_data_point, columns=['cough',	'fever',	'sore_throat',	'shortness_of_breath',	'head_ache',	'age_60_and_above',	'gender', 'abroad',	'contact_with_covid_positive_patient'])

  # 进行预测
  prediction = lr_model.predict(features)

  result_ori.append(prediction)
print(result_ori)

"""## 计算原本模型阳性个数"""

print(len(result_ori))
count = 0
for i in range(512):
  if result_ori[i] == 0:
    count += 1
print(count)
